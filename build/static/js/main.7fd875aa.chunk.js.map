{"version":3,"sources":["logo.svg","images/irislogodark@6x.png","components/paragraph.js","components/line.js","manifesto.js","components/cta-button.js","components/nav.js","components/divider.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CaseParagraph","styled","div","Paragraph","text","color","CaseLine","Line","Manifesto","className","ConfirmButton","visible","MyNavbar","props","state","active","src","iris","alt","React","Component","CaseDivider","h1","textcolor","Divider","title","App","href","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,kC,sBCA3CD,EAAOC,QAAU,IAA0B,6C,wqBCG3C,IAAMC,EAAgBC,IAAOC,IAAV,KAgCJC,EAPG,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,KAAkB,EAAZC,MACzB,OAEE,kBAACL,EAAD,SAAkBI,EAAlB,M,8cC5BJ,IAAME,EAAWL,IAAOC,IAAV,KAgCCK,EAPF,SAAC,GAAqB,IAAnBH,EAAkB,EAAlBA,KAAkB,EAAZC,MACpB,OAEE,kBAACC,EAAD,SAAaF,EAAb,MCSWI,MAjCf,WACE,OACE,yBAAKC,UAAU,aACf,kBAAC,EAAD,CAAML,KAAO,mEAGb,kBAAC,EAAD,CAAMA,KAAO,6EAIb,kBAAC,EAAD,CAAWA,KAAO,oUAGlB,kBAAC,EAAD,CAAMA,KAAO,6GAGb,kBAAC,EAAD,CAAWA,KAAO,mQAGlB,kBAAC,EAAD,CAAWA,KAAO,uOAGlB,kBAAC,EAAD,CAAMA,KAAO,gHAIb,kBAAC,EAAD,CAAMA,KAAO,gLCtBAM,G,MARK,SAAC,GAAqB,IAApBN,EAAmB,EAAnBA,KAAmB,EAAbO,QAE1B,OACA,yBAAKF,UAAY,cAAcL,K,yDCiCpBQ,E,kDA3Bb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACGC,MAAQ,CACTC,QAAQ,GAHA,E,qDASd,OACI,yBAAKN,UAAY,UAGd,yBAAKA,UAAY,OAAOO,IAAKC,IAAMC,IAAI,U,GAf7BC,IAAMC,W,kYCN7B,IAAMC,EAAcpB,IAAOqB,GAAV,KACO,SAAAT,GAAK,OAAIA,EAAMR,SAC1B,SAAAQ,GAAK,OAAIA,EAAMU,aA4BbC,EARC,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,MAAOpB,EAAuB,EAAvBA,MAAOkB,EAAgB,EAAhBA,UAE/B,OACE,kBAACF,EAAD,CAAahB,MAASA,EAAOkB,UAAaA,GAA1C,IAAuDE,EAAvD,MCJWC,MAZf,WACE,OACE,yBAAKjB,UAAU,OACf,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,uBAAGkB,KAAO,mDAAmDC,OAAS,UAAtE,IAAgF,kBAAC,EAAD,CAAexB,KAAO,iBAAtG,KACA,kBAAC,EAAD,QCPgByB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7fd875aa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/irislogodark@6x.e9eb360c.png\";","import React, {Component} from 'react'; \nimport styled, { css } from 'styled-components';\n\nconst CaseParagraph = styled.div`\n    font-weight: normal;\n    font-family: DM Sans;\n    font-size: 24px;\n    line-height: 34px;\n    text-align: left;\n\n\n    margin-top: 1em;\n    margin-bottom: 1.5em;\n\n    @media (max-width: 800px) {\n       margin-left: 7vw;\n       margin-right: 7vw;\n        \n      }\n\n      @media (max-width: 500px) {\n      font-size: 18px;\n      line-height: 1.8;\n         \n       }\n\n`;\n\nconst Paragraph = ( {text, color} ) => {\n  return(\n\n    <CaseParagraph > {text} </CaseParagraph>\n  )\n}\n\nexport default Paragraph;\n","import React, {Component} from 'react'; \nimport styled, { css } from 'styled-components';\n\nconst CaseLine = styled.div`\n    font-weight: normal;\n    font-family: DM Sans;\n    text-align: left;\n    font-size: 24px;\n    line-height: 34px;\n\n\n    margin-top: 1em;\n    margin-bottom: 1.5em;\n\n    @media (max-width: 800px) {\n       margin-left: 7vw;\n       margin-right: 7vw;\n        \n      }\n\n      @media (max-width: 500px) {\n      font-size: 18px;\n      line-height: 1.8;\n         \n       }\n\n`;\n\nconst Line = ( {text, color} ) => {\n  return(\n\n    <CaseLine > {text} </CaseLine>\n  )\n}\n\nexport default Line;\n","import React from 'react';\nimport logo from './logo.svg';\nimport Paragraph from \"./components/paragraph\";\nimport Line from \"./components/line\";\n\n\n\nfunction Manifesto() {\n  return (\n    <div className=\"Manifesto\">\n    <Line text = \"Assistants were supposed to help students like us.  Seriously.\">\n    </Line>\n\n    <Line text = \"But, we never quite got Jarvis from Iron Man or a futuristic VR headset.\">\n    </Line>\n\n\n    <Paragraph text = \"Instead, Siri tells you what it found on the web.  Alexa tells Jeff Bezos what you found on the web.  We all expected more from these products.  You were a kid when they were first released.  And we placed our wonder and excitement into imagining a future where our technology was crafted to help us be our best selves.\"> \n    </Paragraph>\n\n    <Line text = \"You learned to live with the products you had, and over time, the term personal assistant got a bad rap.\">\n    </Line>\n\n    <Paragraph text = \"Now, an assistant sounds more like a fancy butler than something you can see yourself needing.  On top of that, you're busier than you ever were before.  The word has lost its touch.  Its lost the joy, and even if you had the time to care, you wouldn't. \"> \n    </Paragraph>\n\n    <Paragraph text = \"Iris is a second chance to fall in love with the word assistant.   It's how it should have been built from the beginning, dead simple, and its deeply yours.  Its your starter park for your life as a student, pandemic and all. \"> \n    </Paragraph>\n\n    <Line text = \"And we're starting somewhere you spend a lot of time in.  The kitchen, making food for yourself and others.\">\n    </Line>\n\n\n    <Line text = \"Sign up for our waitlist, please.  We're accepting students in small groups so we can deliver a stellar, crafted experience, and white glove service from the whole team.\">\n    </Line>\n\n    </div>\n  );\n}\n\nexport default Manifesto;\n","import React, {Component} from 'react'; \nimport '../components/cta-button.css';\n\nconst ConfirmButton = ({text, visible}) => {\n\n    return(\n    <div className = \"cta-button\">{text}</div>\n    \n    )\n  }\n\n  export default ConfirmButton;\n","import React, {Component} from 'react'; \n// import logo from '../images/logo@2x.svg';\n\n//react router for routes\nimport { Link, BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport '../components/nav.css';\nimport iris from '../images/irislogodark@6x.png';\n\n\n\nclass MyNavbar extends React.Component{\n\n  constructor(props){\n    super(props);\n        this.state = {\n            active: false\n        };\n    }\n \n  render() {\n   \n      return (\n          <div className = 'Navbar'>\n\n             {/* <div className = \"logo\">SG</div> */}\n             <img className = 'logo' src={iris} alt=\"\"></img>\n              \n              {/* <div className = \"nav-text\" id = \"work\"><Link className = \"nav-link\" to=\"/\"> Work</Link></div>\n              <div className = \"nav-text\" id = \"about\"> <Link className = \"nav-link\" to=\"/about\">About</Link> </div>\n */}\n\n          </div>\n    \n\n\n      );\n  }\n}\n\nexport default MyNavbar;\n","import React, {Component} from 'react'; \nimport styled, { css } from 'styled-components'\n\n\nconst CaseDivider = styled.h1`\n    background-color: ${props => props.color};\n    color: ${props => props.textcolor};\n\n    padding-top: 2em;\n    padding-bottom: 2em;\n\n    margin-top: 1em;\n    margin-bottom: 1em;\n    padding-left: 20%;\n    padding-right: 20%;\n\n    @media (max-width: 500px) {\n       padding-left: 7vw;\n       padding-right: 7vw;\n           \n         }\n  \n\n`;\n\n\nconst Divider = ( {title, color, textcolor} ) => {\n\n  return(\n    <CaseDivider color = {color} textcolor = {textcolor}> {title} </CaseDivider>\n\n  )\n}\n\nexport default Divider;\n\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Manifesto from \"./manifesto\";\nimport ConfirmButton from './components/cta-button.js';\nimport MyNavbar from './components/nav.js';\nimport Divider from './components/divider.js';\n\n\n\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <MyNavbar></MyNavbar>\n    <Manifesto></Manifesto>\n    <a href = \"https://irissuggestions.typeform.com/to/FuP4UNp9\" target = \"_blank\"> <ConfirmButton text = \"Sign Up Here\"></ConfirmButton> </a> \n    <Divider></Divider>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}